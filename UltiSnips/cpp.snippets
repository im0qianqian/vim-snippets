priority -50

extends c

# We want to overwrite everything in parent ft.
priority -49
###########################################################################
#			    Global functions 						  #
###########################################################################

global !p

def write_docstring_args(arglist, snip):
	args = str(arglist).split(',')

	if len(args) > 1:
		c = 0
		for arg in args:
			if c == 0:
				snip.rv += arg
				c = 1
			else:
				snip += '*       : %s' % arg.strip()
	else:
		snip.rv = args[0]


endglobal

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet beginend "$1.begin(), $1.end() (beginend)"
${1:v}${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}begin(), $1${1/^.*?(-)?(>)?$/(?2::(?1:>:.))/}end()
endsnippet

snippet cl "class .. (class)"
class ${1:`!p snip.rv = snip.basename or "name"`}
{
public:
	${1/(\w+).*/$1/} (${2:arguments});
	virtual ~${1/(\w+).*/$1/} ();

private:
	${0:/* data */}
};
endsnippet

snippet ns "namespace .. (namespace)"
namespace${1/.+/ /m}${1:`!p snip.rv = snip.basename or "name"`}
{
	${VISUAL}$0
}${1/.+/ \/* /m}$1${1/.+/ *\/ /m}
endsnippet

snippet readfile "read file (readF)"
std::vector<char> v;
if (FILE *fp = fopen(${1:"filename"}, "r"))
{
	char buf[1024];
	while(size_t len = fread(buf, 1, sizeof(buf), fp))
		v.insert(v.end(), buf, buf + len);
	fclose(fp);
}
endsnippet

snippet map "std::map (map)"
std::map<${1:key}, ${2:value}> map$0;
endsnippet

snippet vector "std::vector (v)"
std::vector<${1:char}> v$0;
endsnippet

snippet tp "template <typename ..> (template)"
template <typename ${1:_InputIter}>
endsnippet

snippet cla "An entire .h generator" b
#ifndef ${2:`!v substitute(vim_snippets#Filename('$1_H','ClassName'),'.*','\U&\E','')`}
#define $2

class ${1:`!v substitute(substitute(vim_snippets#Filename('$1','ClassName'),'^.','\u&',''), '_\(\w\)', '\u\1', 'g')`}
{
private:
	$3

public:
	$1();
	virtual ~$1();
};

#endif /* $2 */
endsnippet


snippet fnc "Basic c++ doxygen function template" b
/**
* @brief: ${4:brief}
*
* @param: `!p write_docstring_args(t[3],snip)`
*
* @return: `!p snip.rv = t[1]`
*/
${1:ReturnType} ${2:FunctionName}(${3:param})
{
	${0:FunctionBody}
}
endsnippet
# vim:ft=snippets:

######## Diy by im0qianqian ########
priority 0

snippet main "主函数"
#include <bits/stdc++.h>
#define IO                       \
	ios::sync_with_stdio(false); \
	cin.tie(0);                  \
	cout.tie(0);
#define mem(a, x) memset(a, x, sizeof(a))
#define per(x, a, b) for (int x = a; x <= b; x++)
#define rep(x, a, b) for (int x = a; x >= b; x--)

using namespace std;
typedef long long LL;
const int maxn = 1e5 + 10;
const int mod = 1e9 + 7;
const double eps = 1e-8;

int main() {
#ifdef LOCAL_IM0QIANQIAN
	freopen("test.in", "r", stdin);
//    freopen("test.out", "w", stdout);
#else
	IO;
#endif // LOCAL_IM0QIANQIAN

	${VISUAL}${0:/* Code */}
	return 0;
}
endsnippet

snippet fori "正向循环 0 -> len"
for (int ${1:i} = ${2:0}; $1 < ${3:len}; $1++) {
	${VISUAL}$0
}
endsnippet

snippet forr "反向循环 len-1 -> 0"
for (int ${1:i} = ${2:len - 1}; $1 >= ${3:0}; $1--) {
	${VISUAL}$0
}
endsnippet

snippet node "建图模板"
struct node {
	int from;
	int to;
	int next;
	int cost;
} edge[maxn << 1];
int head[maxn], tot;

void init() {
	memset(head, -1, sizeof(head));
	tot = 0;
}

void addedge(int u, int v, int cost) {
	edge[tot].from = u;
	edge[tot].to = v;
	edge[tot].cost = cost;
	edge[tot].next = head[u];
	head[u] = tot++;
}

$0
endsnippet

snippet mult "快速幂"
LL mult(LL a, LL n, LL mod) {
	LL ans = 1;
	a %= mod;
	while (n) {
		if (n & 1)
			ans = (ans * a) % mod;
		a = (a * a) % mod;
		n >>= 1;
	}
	return ans;
}

$0
endsnippet

snippet unordered_map "更安全快速的 hash_table"
struct custom_hash {
	static uint64_t splitmix64(uint64_t x) {
		x += 0x9e3779b97f4a7c15;
		x = (x ^ (x >> 30)) * 0xbf58476d1ce4e5b9;
		x = (x ^ (x >> 27)) * 0x94d049bb133111eb;
		return x ^ (x >> 31);
	}
	size_t operator()(uint64_t x) const {
		static const uint64_t FIXED_RANDOM =
			chrono::steady_clock::now().time_since_epoch().count();
		return splitmix64(x + FIXED_RANDOM);
	}
};
unordered_map<long long, int, custom_hash> ${1:safe_map};

$0
endsnippet

snippet mt19937 "茅台 19937?"
mt19937 mt_rand(
	chrono::high_resolution_clock::now().time_since_epoch().count());
endsnippet

snippet freop "输入输出重定向"
#ifdef LOCAL_IM0QIANQIAN
	freopen("test.in", "r", stdin);
//    freopen("test.out", "w", stdout);
#endif // LOCAL_IM0QIANQIAN

$0
endsnippet

